// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: crypto_server/crypto_server.proto

package crypto_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CryptographicServiceClient is the client API for CryptographicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptographicServiceClient interface {
	Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (CryptographicService_WatchClient, error)
	ListCapabilities(ctx context.Context, in *ListCapabilitiesRequest, opts ...grpc.CallOption) (*ListCapabilitiesResponse, error)
	Compute(ctx context.Context, in *Execute, opts ...grpc.CallOption) (*Result, error)
}

type cryptographicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptographicServiceClient(cc grpc.ClientConnInterface) CryptographicServiceClient {
	return &cryptographicServiceClient{cc}
}

func (c *cryptographicServiceClient) Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (CryptographicService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &CryptographicService_ServiceDesc.Streams[0], "/crypto_server.CryptographicService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &cryptographicServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CryptographicService_WatchClient interface {
	Recv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type cryptographicServiceWatchClient struct {
	grpc.ClientStream
}

func (x *cryptographicServiceWatchClient) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cryptographicServiceClient) ListCapabilities(ctx context.Context, in *ListCapabilitiesRequest, opts ...grpc.CallOption) (*ListCapabilitiesResponse, error) {
	out := new(ListCapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/crypto_server.CryptographicService/ListCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptographicServiceClient) Compute(ctx context.Context, in *Execute, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/crypto_server.CryptographicService/Compute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptographicServiceServer is the server API for CryptographicService service.
// All implementations must embed UnimplementedCryptographicServiceServer
// for forward compatibility
type CryptographicServiceServer interface {
	Watch(*HealthCheckRequest, CryptographicService_WatchServer) error
	ListCapabilities(context.Context, *ListCapabilitiesRequest) (*ListCapabilitiesResponse, error)
	Compute(context.Context, *Execute) (*Result, error)
	mustEmbedUnimplementedCryptographicServiceServer()
}

// UnimplementedCryptographicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCryptographicServiceServer struct {
}

func (UnimplementedCryptographicServiceServer) Watch(*HealthCheckRequest, CryptographicService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedCryptographicServiceServer) ListCapabilities(context.Context, *ListCapabilitiesRequest) (*ListCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCapabilities not implemented")
}
func (UnimplementedCryptographicServiceServer) Compute(context.Context, *Execute) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compute not implemented")
}
func (UnimplementedCryptographicServiceServer) mustEmbedUnimplementedCryptographicServiceServer() {}

// UnsafeCryptographicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptographicServiceServer will
// result in compilation errors.
type UnsafeCryptographicServiceServer interface {
	mustEmbedUnimplementedCryptographicServiceServer()
}

func RegisterCryptographicServiceServer(s grpc.ServiceRegistrar, srv CryptographicServiceServer) {
	s.RegisterService(&CryptographicService_ServiceDesc, srv)
}

func _CryptographicService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CryptographicServiceServer).Watch(m, &cryptographicServiceWatchServer{stream})
}

type CryptographicService_WatchServer interface {
	Send(*HealthCheckResponse) error
	grpc.ServerStream
}

type cryptographicServiceWatchServer struct {
	grpc.ServerStream
}

func (x *cryptographicServiceWatchServer) Send(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CryptographicService_ListCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptographicServiceServer).ListCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto_server.CryptographicService/ListCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptographicServiceServer).ListCapabilities(ctx, req.(*ListCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptographicService_Compute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Execute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptographicServiceServer).Compute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto_server.CryptographicService/Compute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptographicServiceServer).Compute(ctx, req.(*Execute))
	}
	return interceptor(ctx, in, info, handler)
}

// CryptographicService_ServiceDesc is the grpc.ServiceDesc for CryptographicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptographicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crypto_server.CryptographicService",
	HandlerType: (*CryptographicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCapabilities",
			Handler:    _CryptographicService_ListCapabilities_Handler,
		},
		{
			MethodName: "Compute",
			Handler:    _CryptographicService_Compute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _CryptographicService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "crypto_server/crypto_server.proto",
}

// CryptographicRegistrarClient is the client API for CryptographicRegistrar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptographicRegistrarClient interface {
	Register(ctx context.Context, in *RegisterCryptographyPrimitive, opts ...grpc.CallOption) (*Result, error)
}

type cryptographicRegistrarClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptographicRegistrarClient(cc grpc.ClientConnInterface) CryptographicRegistrarClient {
	return &cryptographicRegistrarClient{cc}
}

func (c *cryptographicRegistrarClient) Register(ctx context.Context, in *RegisterCryptographyPrimitive, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/crypto_server.CryptographicRegistrar/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptographicRegistrarServer is the server API for CryptographicRegistrar service.
// All implementations must embed UnimplementedCryptographicRegistrarServer
// for forward compatibility
type CryptographicRegistrarServer interface {
	Register(context.Context, *RegisterCryptographyPrimitive) (*Result, error)
	mustEmbedUnimplementedCryptographicRegistrarServer()
}

// UnimplementedCryptographicRegistrarServer must be embedded to have forward compatible implementations.
type UnimplementedCryptographicRegistrarServer struct {
}

func (UnimplementedCryptographicRegistrarServer) Register(context.Context, *RegisterCryptographyPrimitive) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedCryptographicRegistrarServer) mustEmbedUnimplementedCryptographicRegistrarServer() {
}

// UnsafeCryptographicRegistrarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptographicRegistrarServer will
// result in compilation errors.
type UnsafeCryptographicRegistrarServer interface {
	mustEmbedUnimplementedCryptographicRegistrarServer()
}

func RegisterCryptographicRegistrarServer(s grpc.ServiceRegistrar, srv CryptographicRegistrarServer) {
	s.RegisterService(&CryptographicRegistrar_ServiceDesc, srv)
}

func _CryptographicRegistrar_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCryptographyPrimitive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptographicRegistrarServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto_server.CryptographicRegistrar/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptographicRegistrarServer).Register(ctx, req.(*RegisterCryptographyPrimitive))
	}
	return interceptor(ctx, in, info, handler)
}

// CryptographicRegistrar_ServiceDesc is the grpc.ServiceDesc for CryptographicRegistrar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptographicRegistrar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crypto_server.CryptographicRegistrar",
	HandlerType: (*CryptographicRegistrarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _CryptographicRegistrar_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crypto_server/crypto_server.proto",
}
